////////////////////////////////////////////////////////////////////////////////////////////////////
// file:	apis\api.cs
//
// summary:	Implements the API class
////////////////////////////////////////////////////////////////////////////////////////////////////

using System;
using ApiViewer.Standard.Models;
using System.Collections.Generic;
using System.Net.Http;
using Newtonsoft.Json;

namespace ApiViewer.Standard
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>   An api. </summary>
    ///
    /// <remarks>   James Coates, 8/26/2017. </remarks>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    public abstract class Api
    {
        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the cache. </summary>
        ///
        /// <value> The cache. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        protected List<IModel> _cache { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the name. </summary>
        ///
        /// <value> The name. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public abstract string Name { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the host. </summary>
        ///
        /// <value> The host. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public abstract string Host { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets URL of the document. </summary>
        ///
        /// <value> The URL. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public abstract string Url { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the category. </summary>
        ///
        /// <value> The category. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public abstract string Category { get; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets or sets the Date/Time of the last fetch. </summary>
        ///
        /// <value> The last fetch. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public DateTime LastFetch { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets all. </summary>
        ///
        /// <remarks>   James Coates, 8/26/2017. </remarks>
        ///
        /// <returns>   all. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public abstract List<IModel> GetAll();

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets the t. </summary>
        ///
        /// <value> The t. </value>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        protected List<T> GetResults<T>(string _url = "") where T : class, new()
        {
            var client = new HttpClient();

            if (_url == "") _url = Host + "/" + Url;

            var json = client.GetStringAsync(_url).Result;
            var data = JsonConvert.DeserializeObject<T>(json);

            var dList = new List<T>();
            dList.Add(data);

            LastFetch = DateTime.Now;

            //var client = new RestClient(Host);
            //var request = new RestRequest(Url, RequestMethod);
            //var response = client.Execute<List<T>>(request);
            
            return dList;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Gets by identifier. </summary>
        ///
        /// <remarks>   James Coates, 8/26/2017. </remarks>
        ///
        /// <param name="value">    The value. </param>
        ///
        /// <returns>   The by identifier. </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public IModel GetById(string value)
        {
            foreach (var v in _cache)
                if (v.Name == value)
                    return v;
            return null;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Searches for the first match for the given string. </summary>
        ///
        /// <remarks>   James Coates, 8/26/2017. </remarks>
        ///
        /// <param name="value">    The value. </param>
        ///
        /// <returns>   A List&lt;IModel&gt; </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public List<IModel> Search(string value)
        {
            if (_cache == null) _cache = GetAll();
            var result = new List<IModel>();
            foreach (var v in _cache)
            {
                if (v.Name.Contains(value))
                    result.Add(v);
            }
            return result;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>   Clears the cache. </summary>
        ///
        /// <remarks>   James Coates, 8/26/2017. </remarks>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        public void ClearCache()
        {
            _cache = null;
        }
    }
}
